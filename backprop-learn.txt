-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Combinators and useful tools for ANNs using the backprop library
--   
--   See README.md
@package backprop-learn
@version 0.1.0.0

module Backprop.Learn.Class

-- | Class for models that can be trained using gradient descent.
--   
--   An instance <tt>l</tt> of <tt><a>Learn</a> p a b</tt> is parameterized
--   by <tt>p</tt>, takes <tt>a</tt> as input, and returns <tt>b</tt> as
--   outputs.
--   
--   <tt>l</tt> can be thought of as representing the
--   <i>hyperparameters</i> of the model, with <tt>p</tt> representing the
--   <i>trained parameters</i> of the model.
--   
--   If no trained parameters exist, <a>NoParam</a> can be used. This will
--   automatically derive <a>initParams</a>.
class (Num p, Num a, Num b) => Learn p a b l | l -> p, l -> a, l -> b

-- | Initialization of trainiable model parameters.
initParams :: (Learn p a b l, PrimMonad m) => l -> Gen (PrimState m) -> m p

-- | Initialization of trainiable model parameters.
initParams :: (Learn p a b l, PrimMonad m, p ~ NoParam) => l -> Gen (PrimState m) -> m p

-- | Run the model.
runFixed :: (Learn p a b l, Reifies s W) => l -> BVar s p -> BVar s a -> BVar s b

-- | Running the model in "stochastic" mode.
--   
--   For nonstochastic models, is automatically defined in terms of
--   <a>runFixed</a>.
runStoch :: (Learn p a b l, PrimMonad m, Reifies s W) => l -> Gen (PrimState m) -> BVar s p -> BVar s a -> m (BVar s b)

-- | Useful convenience type for trained models without learnable
--   parameters. Can be used to automatically derive <a>initParams</a> if
--   given as a model's parmaeters.
type NoParam = T0

module Backprop.Learn

module Backprop.Learn.Dropout
instance GHC.TypeNats.KnownNat n => Backprop.Learn.Class.Learn Backprop.Learn.Class.NoParam (Internal.Static.R n) (Internal.Static.R n) (Backprop.Learn.Dropout.DO n)

module Backprop.Learn.FullyConnected

-- | Fully connected feed-forward layer with bias. Parameterized by its
--   initialization distribution.
newtype FC (i :: Nat) (o :: Nat)
FC :: (forall m. PrimMonad m => Gen (PrimState m) -> m Double) -> FC
[_fcGen] :: FC -> forall m. PrimMonad m => Gen (PrimState m) -> m Double

-- | Construct an <tt><a>FC</a> i o</tt> using a given distribution from
--   the <i>statistics</i> library.
fc :: ContGen d => d -> FC i o

-- | Fully connected feed-forward layer parameters.
data FCP i o
FCP :: !(R o) -> !(L o i) -> FCP i o
[_fcBias] :: FCP i o -> !(R o)
[_fcWeights] :: FCP i o -> !(L o i)
fcBias :: Functor f => (R o -> f (R o)) -> FCP i o -> f (FCP i o)
fcWeights :: Functor f => (L o i -> f (L o k)) -> FCP i o -> f (FCP k o)
instance GHC.Generics.Generic (Backprop.Learn.FullyConnected.FCP i o)
instance (GHC.TypeNats.KnownNat i, GHC.TypeNats.KnownNat o) => GHC.Num.Num (Backprop.Learn.FullyConnected.FCP i o)
instance (GHC.TypeNats.KnownNat i, GHC.TypeNats.KnownNat o) => Backprop.Learn.Class.Learn (Backprop.Learn.FullyConnected.FCP i o) (Internal.Static.R i) (Internal.Static.R o) (Backprop.Learn.FullyConnected.FC i o)
