name:                backprop-learn
version:             0.1.0.0
github:              mstksg/backprop-learn
license:             BSD3
author:              Justin Le
maintainer:          justin@jle.im
copyright:           (c) Justin Le 2018
tested-with:         GHC >= 8.2

extra-source-files:
- README.md

# Metadata used when publishing your package
synopsis:            Combinators and useful tools for ANNs using the backprop library
category:            Math

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description: See README.md

ghc-options:
- -Wall
- -Wcompat
- -Wincomplete-record-updates
- -Wredundant-constraints
- -fprint-explicit-kinds
dependencies:
- base >=4.7 && <5
# - deepseq
# - transformers
# - vector

library:
  source-dirs: src
  # exposed-modules:
  # - Numeric.Backprop
  # - Numeric.Backprop.Op
  # - Numeric.Backprop.Tuple
  # - Prelude.Backprop
  # other-modules:
  # - Numeric.Backprop.Internal
  # - Data.Type.Util
  dependencies:
    - backprop >= 0.1.3
  # - microlens
  # - primitive
  # - reflection
  # - type-combinators
  # - profunctors

# benchmarks:
#   backprop-mnist-bench:
#     main: MNISTBench.hs
#     source-dirs: bench
#     ghc-options:
#     - -threaded
#     - -rtsopts
#     - -with-rtsopts=-N
#     - -O2
#     dependencies:
#     - backprop
#     - bifunctors
#     - criterion
#     - directory
#     - hmatrix >=0.18
#     - lens
#     - mnist-idx
#     - mwc-random
#     - time

# dependencies:
# - backprop
# - data-default
# - deepseq
# - finite-typelits
# - mwc-random
# - primitive
# - singletons
# - split
# - transformers
# - type-combinators
# - vector
# - vector-sized
# library:
#   source-dirs: src
#   ghc-options: -Wall
#   exposed-modules:
#   - Learn.Neural
#   - Learn.Neural.Layer
#   - Learn.Neural.Layer.Applying
#   - Learn.Neural.Layer.Compose
#   - Learn.Neural.Layer.FullyConnected
#   - Learn.Neural.Layer.Identity
#   - Learn.Neural.Layer.Mapping
#   - Learn.Neural.Layer.Recurrent.FullyConnected
#   - Learn.Neural.Layer.Recurrent.LSTM
#   - Learn.Neural.Loss
#   - Learn.Neural.Network
#   - Learn.Neural.Network.Dropout
#   - Learn.Neural.Test
#   - Learn.Neural.Train
#   - Numeric.BLAS
#   - Numeric.BLAS.FVector
#   - Numeric.BLAS.HMatrix
#   - Numeric.BLAS.NVector
#   - Numeric.Tensor
#   dependencies:
#   - base >=4.7 && <5
#   - ad
#   - foldl
#   - generics-lift
#   - generics-sop
#   - hmatrix >=0.18
#   - mono-traversable
#   - profunctors
#   - reflection
#   - statistics
#   - microlens
#   - type-combinators-singletons

# executables:
#   backprop-learn-mnist:
#     main: MNIST.hs
#     source-dirs: app
#     ghc-options:
#     - -threaded
#     - -rtsopts
#     - -with-rtsopts=-N
#     - -O2
#     - -Wall
#     dependencies:
#     - base
#     - backprop-learn
#     - bifunctors
#     - hmatrix
#     - mnist-idx
#     - time
#   backprop-learn-language:
#     main: Language.hs
#     source-dirs: app
#     ghc-options:
#     - -threaded
#     - -rtsopts
#     - -with-rtsopts=-N
#     - -O2
#     - -Wall
#     dependencies:
#     - base
#     - backprop-learn
#     - time
#     - vector-algorithms
#   backprop-learn-letter2vec:
#     main: Letter2Vec.hs
#     source-dirs: app
#     ghc-options:
#     - -threaded
#     - -rtsopts
#     - -with-rtsopts=-N
#     - -O2
#     - -Wall
#     dependencies:
#     - base
#     - backprop-learn
#     - time
#     - vector-algorithms
